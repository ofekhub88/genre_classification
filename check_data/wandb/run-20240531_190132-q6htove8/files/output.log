[1m========================================================================== test session starts ==========================================================================
platform linux -- Python 3.12.3, pytest-8.2.1, pluggy-1.5.0 -- /home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/bin/python3.12
cachedir: .pytest_cache
rootdir: /mnt/c/wsl/mount/Udacity/genre_classification/check_data
[1mcollected 4 items                                                                                                                                                       
test_data.py::test_column_presence_and_type [31mERROR
test_data.py::test_class_names [31mERROR
test_data.py::test_column_ranges [31mERROR
test_data.py::test_kolmogorov_smirnov [31mERROR
================================================================================ ERRORS =================================================================================
[31m[1m____________________________________________________________ ERROR at setup of test_column_presence_and_type ____________________________________________________________
args = (<wandb.apis.public.api.Api object at 0x7fb4660b0a70>,), kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:400: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:390: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2930: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: CommError
[31m[1m__________________________________________________________________ ERROR at setup of test_class_names ___________________________________________________________________
args = (<wandb.apis.public.api.Api object at 0x7fb4660b0a70>,), kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:400: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:390: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2930: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: CommError
[31m[1m_________________________________________________________________ ERROR at setup of test_column_ranges __________________________________________________________________
args = (<wandb.apis.public.api.Api object at 0x7fb4660b0a70>,), kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:400: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:390: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2930: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: CommError
[31m[1m_______________________________________________________________ ERROR at setup of test_kolmogorov_smirnov _______________________________________________________________
args = (<wandb.apis.public.api.Api object at 0x7fb4660b0a70>,), kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'"
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:400: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:390: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2930: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:975: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'ofekm88', project = 'exercise_14', name = 'preprocessed_data.csv:latest'
client = <wandb.apis.public.api.RetryingClient object at 0x7fb4660b1a00>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[31m[1mE           wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m[1m/home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:271: CommError
[33m=========================================================================== warnings summary ============================================================================
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.
../../../../../../../home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/google/protobuf/internal/well_known_types.py:174: 3 warnings
test_data.py: 12 warnings
  /home/meirof/miniconda3.10/envs/mlflow-62c52f5db2a6678a233e4b16d0a61af8f04a2bf1/lib/python3.12/site-packages/google/protobuf/internal/well_known_types.py:174: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    self.FromDatetime(datetime.datetime.utcnow())
-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[36m[1m======================================================================== short test summary info ========================================================================
[31mERROR[39m test_data.py::[1mtest_column_presence_and_type[22m - wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31mERROR[39m test_data.py::[1mtest_class_names[22m - wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31mERROR[39m test_data.py::[1mtest_column_ranges[22m - wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31mERROR[39m test_data.py::[1mtest_kolmogorov_smirnov[22m - wandb.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'ofekm88/exercise_14'
[31m==================================================================== [33m17 warnings[39m, [31m[1m4 errors[22m in 1.31s =====================================================================